// SETI 1.5 Steering Script 
// Modified from Yiqun Ma's Tiling-all-in-one-folder.bsh
// By Niklas Gahm
// 2021/10/13

// Notes for Upgrading to SETI 2.0
// - at various points there's specific comments about things that should be updated for 2.0 marked with ------------------ at the end
// - any reference to arduino needs to be removed
// - wait times may be unnecessary since uManager theoretically knows when some step is completed

// Imports
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.lang.String;
import ij.IJ; 
import ImageConverter;
import org.micromanager.projector.ProjectorActions;
import org.micromanager.projector.internal.devices.SLM;



//------------------ INPUTS ----------------------------------------
inputs(){
	
	double depthOfSectioning = 20;	// total depth of physical sectioning in um (10um per cut).
								//eg: 200 for 200um and 20 cuts
	double imgDepth = 1;	// including the top surface, how many optical slices (10 um each)?  
	int tilingDim = 1;	// How Big a square will be tiled. NOTE: matched G Code only supports 3x3 at the moment
	
	// set camera exposure in ms				
	double exposure = 1; 
	int objective = 20;
	double zStepSize = 10; // in um 

	String acquName = "2022-09-16-Test";  //name of folder generated
	
	
	// NOTE! All File paths must use / or \\ instead of \ on Windows
	
	String rootDir = "C:/Users/admin2/Box Sync/SETI/"; //address of mother folder
	
	String dlpPatternPath = "C:/Users/admin2/Documents/GitHub/SETI/Steering Code/Patterns/1920x1080/3 Sub Image Perfect Bar 21 Pixels 0 Aperture 0deg Rotation";	// Folder Containg Patterns for DLP

	// Dimensions of Pattern Image File
	int patDim1 = 1920;
	int patDim2 = 1080;

	show = true;	// to display every image taken as if you clicked snap
	save = true;	// to save the images
	validity_check = true; // to print various checks to the command line 

	return this;
}
//--------------- END INPUT ----------------------------------------





//------------------ Methods ---------------------------------------
// Find the Pattern Files
imgFileSearch( String fileType, File folder, ArrayList result ){
	
	File[] files = folder.listFiles();
	if (files !=null){
		for (File f : files){
			if (f.isFile()) {
				if (f.getName().matches(fileType)) {
					result.add(f.getAbsolutePath());
				}
			}
		}
	}

	return result; 
}

// Find the BrightField Reference File
bfImgFileSearch( String fileType, String folder, boolean validity_check ){
	
	bfpath = false;
	if (validity_check){
		print("System File Seperator: " + File.separator);
	}
	folder = folder.replace("\\", File.separator);
	folder = folder.replace("/", File.separator);
	
	if (validity_check){
		print(folder);
	}
	
	int sep = folder.lastIndexOf(File.separator);
	folder = folder.substring(0,sep);
	// Check seperator is correct
	if (validity_check){
		print(folder);
	}

	File bfpath = new File(folder);
	File[] files = bfpath.listFiles();
	if (files !=null){
		for (File f : files){
			if (f.isFile()) {
				if (f.getName().matches(fileType)) {
					 return f.getAbsolutePath();
				}
			}
		}
	}
	
	return bfpath;
}


//Read Image as byte[]
imgReadByte(imgSource, int patDim1, int patDim2, boolean validity_check){
	FileInputStream in = new FileInputStream(imgSource);
	ByteArrayOutputStream bos = new ByteArrayOutputStream();
	byte[] buffer = new byte[1024];
	for (int i; (i = in.read(buffer)) != -1; ) {
  		bos.write(buffer, 0, i);
	}
	in.close();
	byte[] imageData = bos.toByteArray();
	bos.close();

	if (validity_check){
		print("Original Read In Length: " + imageData.length);
	}
	
	// Remove meta Data by only keeping the dimensional bytes
	patOffset = imageData.length - (patDim1 * patDim2);
	if (validity_check){
		print("Index Offset for Meta Data: " + patOffset);
	}

	imageData = Arrays.copyOfRange(imageData, patOffset, imageData.length);
	
	if (validity_check){
		print("Meta Data Stripped Length: " + imageData.length);
	}

	return imageData;
}

// Load all the Patterns Found into a Single Array
loadAllPatterns(String bfPattern, ArrayList subPatterns, ArrayList dlp_patterns, int patDim1, int patDim2, boolean validity_check) {
	File bfPatternFile = new File(bfPattern);

	dlp_patterns.add(imgReadByte(bfPatternFile, patDim1, patDim2, validity_check));
	
	for (p : subPatterns){
		dlp_patterns.add(imgReadByte(p, patDim1, patDim2, validity_check));
	}

	if (validity_check){
		print("Number of Patterns Total: " + dlp_patterns.size());
	}

	return dlp_patterns;
}

// Initialize the DLP Patterns
dlpPatternInitialization(String dlpPatternPathOrig, ArrayList dlp_patterns, int patDim1, int patDim2, boolean validity_check){

	if(validity_check){
		print("Start DLP Initialization");
	}

	ArrayList img_load_list = new ArrayList();
	File dlpPatternPath = new File(dlpPatternPathOrig);
	// Check correct folder
	if (validity_check){
		print(dlpPatternPath);
	}

	// Get Path to Sub-Image Patterns
	img_load_list = imgFileSearch( ".*.bmp", dlpPatternPath, img_load_list );
	// Get Path to BrightField Reference File
	bf_path = bfImgFileSearch(".*.bmp", dlpPatternPathOrig, validity_check);
	
	//Check correct files found
	if (validity_check){
		for (int i = 0; i < img_load_list.size(); i++){
		  print(img_load_list.get(i));
		}
		print(bf_path);
	}
	
	// Load Patterns for the DLP
	dlp_patterns = loadAllPatterns(bf_path, img_load_list, dlp_patterns, patDim1, patDim2, validity_check);
	return dlp_patterns;
}

// Changes the displayed pattern on the DLP to the input pattern
switchPattern(String slmLabel, byte[] pattern, boolean validity_check){
	//set shutter open
	mmc.setShutterOpen(true);

	if(validity_check){
		print(slmLabel);
		print(pattern.length);
	}

	print("Displaying pattern...");
	mmc.setSLMImage(slmLabel, pattern);
	mmc.displaySLMImage(slmLabel);
	//make sure that dlp is on
	mmc.sleep(50); 
	return true; 
}

// Captures an Image
snapImg(int currCut, int currX, int currY, int currDep, int currPtrn, String slmLabel, pattern, double exposure, String acquName, boolean bfFlag, boolean validity_check){
		mmc.setExposure(exposure/2);
		switchPattern(slmLabel, pattern, validity_check);
		//calculate index for current image
		ind = (tilingDim * tilingDim * currCut * 4) + (currY * tilingDim) + currX + currPtrn;
		if(validity_check){
			print(ind);
		}
		//snap and save an image
		gui.snapAndAddImage(acquName, ind, 0, 0, currDep);
		if(bfFlag){
			print("BF: Depth " + currDep + " Image " + (currCut+1) + " snapped");
		}else{
			print("Slice: " + (currCut) + " Y: " + (currY) + " X: " + (currX) + " image: " + (currPtrn) + " snapped");
		}
		
		//set shutter closed
		mmc.setShutterOpen(false);
		mmc.waitForSystem();
}

// Starts the milling Cycle
millingTrigger(){
	activateMill();
	waitForMillingStart();
	shutterOff();
}









// Tells the Mill to do the Next Sequence in G-Code
activateMill(){
	mmc.setState("Arduino-Switch", 32);  //pin 13 HIGH, triggers milling cycle (pin 15 on mill)
	mmc.setShutterOpen(true);
	return true;
}





// Closes the Shutter and Stops signalling from Arduino
shutterOff(){
	//once milling cycle has started, shutter off
	mmc.setShutterOpen(false);
	mmc.setState("Arduino-Switch", 0);	//all pins LOW
}

//wait for signal from mill to signal the beginning of a cycle (M140)
waitForMillingStart(){
	print("ACTIVATING MILL");
	while(Double.valueOf(mmc.getProperty("Arduino-Input", "AnalogInput5")) > 500){
		mmc.sleep(50);
	}
	print("MILL ACTIVATED");
}










// Main
gui.closeAllAcquisitions();
mmc.setShutterOpen(false);
mmc.setState("Arduino-Switch", 0);	//all pins LOW
gui.clearMessageWindow();

// load in inputs
inputsObject = inputs();
depthOfSectioning = inputsObject.depthOfSectioning;
imgDepth = inputsObject.imgDepth;
tilingDim = inputsObject.tilingDim;
exposure = inputsObject.exposure; 
inputsObject.objective = inputsObject.objective;
zStepSize = inputsObject.zStepSize;
rootDir = inputsObject.rootDir;
dlpPatternPath = inputsObject.dlpPatternPath;
show = inputsObject.show;
save = inputsObject.save;
validity_check = inputsObject.validity_check;
int patDim1 = inputsObject.patDim1;
int patDim2 = inputsObject.patDim2;

// Setting up Variables 
cuts = Math.ceil(depthOfSectioning/zStepSize);
// naming convention can be changed for 2.0 since XYZ information in position file -------------------------------
acquName = inputsObject.acquName + " " + inputsObject.objective + "x_" + (int)(exposure)+"ms_" + 
	tilingDim + "x_" + tilingDim + "y_" + (int)cuts + "z_" + 
	(int)(zStepSize) + "um_cuts";

nrFrames = 0;  
nrChannels = 3;
nrSlices = 3;
nrPositions = 1; //(numPatterns + bright field) * depths

if(validity_check){
	print("\nVariables Initialized");
}

// Load DLP Patterns
ArrayList dlp_patterns = new ArrayList();
dlp_patterns = dlpPatternInitialization(dlpPatternPath, dlp_patterns, patDim1, patDim2, validity_check);

// Get DLP Device Label
slmLabel = mmc.getSLMDevice();

// Process begins
gui.openAcquisition(acquName, rootDir, nrFrames, nrChannels, nrSlices, nrPositions, show, save);


// For each cut
for(int i = 0; i <= cuts; i++){
	print("slice: " + i);
	// initiate arduino pin after machine cycle. 0 for LOW at all pins, 1 for HIGH at pin 8
	mmc.setState("Arduino-Switch", 0);
	mmc.setShutterOpen(false); // all 
	// For each depth and XY Position
	for (int j = 0; j < imgDepth; j++){
		for (int y = 0; y < tilingDim; y++){
			bfFlag = true;
			int counter = 0;
			for (int x = 0; x < tilingDim; x++){
				for (pattern : dlp_patterns){
					snapImg(i, x, y, j, counter, slmLabel, pattern, exposure, acquName, bfFlag, validity_check);
					counter = counter + 1;
					if (bfFlag){
						bfFlag = false;
					}
				}
			}
		}
	}

	if(i != cuts){
		// after images taken, trigger the milling cycle
		millingTrigger();

		// wait for the milling to finish. Check on the status every 500ms
		while (Double.valueOf(mmc.getProperty("Arduino-Input", "AnalogInput5")) < 500) {
			mmc.sleep(500);
		}

		// When finished,
		print("Milling Done");
	}
	mmc.sleep(2000);
}


// After all cuts done, close aquisition
gui.closeAllAcquisitions();
mmc.setShutterOpen(false);
mmc.setState("Arduino-Switch", 0);	//all pins LOW

print("ACQUISITION Done\n");