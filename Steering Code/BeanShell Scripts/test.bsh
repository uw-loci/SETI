// Imports
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;
//import java.io.IOException;
//import java.nio.file.Path;
//import java.nio.file.Paths;
//import java.nio.file.Files;
//import java.awt.image;
//import javax.imageio.ImageIO;

// Inputs
inputs(){
	String fpath = "C:/Users/admin2/Documents/GitHub/SETI/Steering Code/Patterns/1920x1080/3 Sub Image Perfect Bar 21 Pixels 0 Aperture 0deg Rotation";
	return this;
}


// Methods
imgFileSearch(String fileType, File folder, List<String> result){
	for (File f : folder.listFiles()) {
		if (f.isFile()) {
			if (f.getName().matches(fileType)) {
				result.add(f.getAbsolutePath());
			}
		}
	}
}

loadPatterns(String dlpPattern){
	// Patterns Path
	File fpath = new File(dlpPattern);
	File[] dirList = fpath.listFiles();
	//byte[][] allPatterns = new byte[dirList.length][];
	//numSubImgs = dirList.length;
	
	// Patterns
	//for(int i = 0; i < dirList.length; i++){
	//	try{
	//		allPatterns[i][] = Files.readAllBytes(dirList[i]);
	//	}catch(IOException e){}
	//}
	
	// Brightfield Path 
	bfPath = fpath.toString();
	bfPathInd = bfPath.lastIndexOf(File.separator);
	bfPath = bfPath.substring(0, bfPathInd);
	File bfPath = new File(bfPath);
	File[] bfDirList = bfPath.listFiles();
	byte[] brightField = Files.readAllBytes(bfDirList[0]);
	
	return this;
}


// Main

// load in inputs
inputsObj = inputs();
gui.message(inputsObj.fpath);


File fpath = new File(inputsObj.fpath);
List<String> dirList = new ArrayList<>();
imgFileSearch(".*\\.bmp", fpath, dirList);
gui.message(fpath.toString());
gui.message("Number of Pattern Files " + (dirList.length()));

bfPath = fpath.toString();
bfPathInd = bfPath.lastIndexOf(File.separator);
gui.message("Index of final seperator:" + (bfPathInd));
bfPath = bfPath.substring(0, bfPathInd);
gui.message(bfPath);
File bfPath = new File(bfPath);
//File[] bfDirList = bfPath.listFiles();
//gui.message(bfDirList[0].toString());
//gui.message("Number of Bright Field Files " + (bfDirList.length));



patternObject = loadPatterns(inputsObj.fpath);
byte[] brightField = patternObject.brightField;
//byte[][] allPatterns = patternObject.allPatterns;


